/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var oregon = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-124.50991246492801, 46.43504904438413],
          [-124.50991246492801, 41.58774957846286],
          [-116.27016637117801, 41.58774957846286],
          [-116.27016637117801, 46.43504904438413]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

//Module imports
var getImagesLib = require('users/USFS_GTAC/modules:getImagesLib2.js');
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Define user parameters:

var args = {
          'studyArea':oregon,
          'startYear':2015,
          'endYear':2020,
          'startJulian':175,
          'endJulian':175+16,
          'toaOrSR':'TOA',
          'includeSLCOffL7':true,
          'defringeL5':true,
          'applyQABand':false,
          'applyCloudProbability':true,
          'applyShadowShift':false,
          'applyCloudScoreLandsat':false,
          'applyCloudScoreSentinel2':false,
          'applyTDOMLandsat':true,
          'applyTDOMSentinel2':true,
          'applyFmaskCloudMask':true,
          'applyFmaskCloudShadowMask':true,
          'applyFmaskSnowMask':false,
          'cloudHeights':ee.List.sequence(500,10000,500),
          'cloudScoreThresh':20,
          'performCloudScoreOffset':true,
          'cloudScorePctl':10,
          'zScoreThresh':-1,
          'shadowSumThresh':0.35,
          'contractPixels':1.5,
          'dilatePixels':3.5,
          'landsatResampleMethod':'near',
          'sentinel2ResampleMethod':'aggregate',
          'convertToDailyMosaics':true,
          'runChastainHarmonization':true,
          'correctIllumination':false,
          'correctScale':250,
          'cloudProbThresh': 40
        }
//If available, bring in preComputed cloudScore offsets and TDOM stats
//Set to null if computing on-the-fly is wanted
//These have been pre-computed for all CONUS for Landsat and Setinel 2 (separately)
//and are appropriate to use for any time period within the growing season
//The cloudScore offset is generally some lower percentile of cloudScores on a pixel-wise basis
var preComputedCloudScoreOffset = getImagesLib.getPrecomputedCloudScoreOffsets(args.cloudScorePctl);
args.preComputedLandsatCloudScoreOffset = preComputedCloudScoreOffset.landsat;
args.preComputedSentinel2CloudScoreOffset = preComputedCloudScoreOffset.sentinel2;

//The TDOM stats are the mean and standard deviations of the two bands used in TDOM
//By default, TDOM uses the nir and swir1 bands
var preComputedTDOMStats = getImagesLib.getPrecomputedTDOMStats();
args.preComputedLandsatTDOMIRMean = preComputedTDOMStats.landsat.mean;
args.preComputedLandsatTDOMIRStdDev = preComputedTDOMStats.landsat.stdDev;

args.preComputedSentinel2TDOMIRMean = preComputedTDOMStats.sentinel2.mean;
args.preComputedSentinel2TDOMIRStdDev = preComputedTDOMStats.sentinel2.stdDev;

////////////////////////////////////////////////////////////////////////////////
//Function Calls
//Get all images

var images = getProcessedLandsatAndSentinel2Scenes(args);
Map.addLayer(images.median(),getImagesLib.vizParamsFalse)
// //Get water mask
// var permWater = ee.Image("JRC/GSW1_1/GlobalSurfaceWater").select([0]).gte(90).unmask(0);
// var tempWater =ee.ImageCollection("JRC/GSW1_1/MonthlyHistory")
//               .filter(ee.Filter.calendarRange(startYear,endYear,'year'))
//               .filter(ee.Filter.calendarRange(startJulian-30,endJulian+30)).mode().eq(2).unmask(0);

// var water_mask = permWater.or(tempWater).selfMask();
// Map.addLayer(water_mask, {min:1, max:1, palette: "00F"}, 'Water Mask', false);

// //Get TOA Landsat with Fmask applied
// var ls = getImagesLib.getProcessedLandsatScenes(studyArea,startYear-2,endYear+2,startJulian,endJulian,
//   'TOA',false,false,false,true,false,
//   false,true).select(commonBands)
//   .map(function(img){return img.set('whichOne','Landsat')});
  
// //Get TOA S2 with cloudScore applied
// var s2s= getImagesLib.getProcessedSentinel2Scenes(studyArea,startYear-2,endYear+2,startJulian,endJulian,
//   false,true,false,false, 10,false).select(s2Bands,commonBands)
//   .map(function(img){return getImagesLib.harmonizationChastain(img, 'MSI','OLI')})
//   .map(function(img){return img.set('whichOne','S2')});

// //Merge them
// var merged = ls.merge(s2s);
// //Mask cloud shadows using TDOM
// merged = getImagesLib.simpleTDOM2(merged);
// merged = merged.filter(ee.Filter.calendarRange(startYear,endYear,'year'));

// //Separate them for combined and separate analysis
// ls = merged.filter(ee.Filter.eq('whichOne','Landsat'));
// s2s = merged.filter(ee.Filter.eq('whichOne','S2'));
// var bloomCollections = {'Landsat':ls,'Sentinel2':s2s,'Hybrid':merged};

// /// Simplified Script for Landsat Water Quality
// // Produces a map of an algal bloom in Lake Erie on 2011/9/3
// // Created on 12/7/2015 by Jeff Ho

// // VISUALIZATION PARAMETERS -------------------------------------------------------------------------

// var truecolor = 1;  // show true color image as well
// var testThresh = false; // add a binary image classifying into "bloom"and "non-bloom
// var bloomThreshold = 0.02346; //threshold for classification fit based on other data
// var greenessThreshold = 1.6;

// /// FUNCTIONS --------------------------------------------------------------------------------------

// // Implements the Automatic Clouud Cover Assessment, with some changes
// // http://landsathandbook.gsfc.nasa.gov/pdfs/ACCA_SPIE_paper.pdf
// var calcACCA = function(image) {
//   var f1 = image.select('B3').lt(0.08); // B3 below 0.08 is non-cloud
//   var f2 = image.normalizedDifference(['B2','B5']).gt(0.7); // (B2-B5)/(B2+B5) above 0.7 is non-cloud
//   var f3 = image.select('B6_VCID_1').gt(300); // B6 above this is non-cloud
//   var f4 = image.expression("( 1 - b('B5') ) * b('B6_VCID_1')").gt(225); // (1-B5)*B6 above this is ambiguous
//   var f5 = image.expression("b('B4') / b('B3')").gt(2.0); // B4/B3 above this is ambiguous
//   var f6 = image.expression("b('B4') / b('B2')").gt(2.0); // B4/B2 above this is ambiguous
//   var f7 = image.expression("b('B4') / b('B5')").lt(1.0); // B4/B5 below this is ambiguous 
  
//   // Note: snow not expected in these summer scenes, so filter 8 not used
//   //var f8 = image.expression("b('b5') / b('b6')").gt(210); // B5/B6 above this is warm cloud (below is cold cloud)
  
//   //ACCA Pass One
//   var nonclouds = f1.or(f2).or(f3);
//   var ambiguous = nonclouds.not().and(f4.or(f5).or(f6).or(f7));
//   var clouds = nonclouds.not().and(ambiguous.not());
  
//   return image.addBands(clouds.rename('cloud'));
// };

// var maskClouds = function(image) {
//   // Get regions with clouds:
//   var yesCloud = calcACCA(image).select("cloud").eq(0);
//   // Remove clouds by making them 0:
//   return image.updateMask(yesCloud);
// };

// // Specifies a threshold for hue to estimate "green" pixels
// // this is used as an additional filter to refine the algorithm above
// var calcGreenness = function (img) {
//   // map r, g, and b for more readable algebra below
//   var r = img.select(['red']);
//   var g = img.select(['green']);
//   var b = img.select(['blue']);
  
//   // calculate intensity, hue
//   var I = r.add(g).add(b).rename(['I']);
//   var mins = r.min(g).min(b).rename(['mins']);
//   var H = mins.where(mins.eq(r),
//     (b.subtract(r)).divide(I.subtract(r.multiply(3))).add(1) );
//   H = H.where(mins.eq(g),
//     (r.subtract(g)).divide(I.subtract(g.multiply(3))).add(2) );
//   H = H.where(mins.eq(b),
//     (g.subtract(b)).divide(I.subtract(b.multiply(3))) );
    
//   //pixels with hue below 1.6 more likely to be bloom and not suspended sediment
//   var Hthresh = H.lte(1.6);
  
//   return H.rename('H');
// };

// // Apply bloom detection algorithm
// var calcAlgorithm1 = function(image) {
//   // Algorithm 1 based on:
//   // Wang, M., & Shi, W. (2007). The NIR-SWIR combined atmospheric 
//   //  correction approach for MODIS ocean color data processing. 
//   //  Optics Express, 15(24), 15722â€“15733.
  
//   // Add secondary filter using greenness function below
//   image = image.addBands(calcGreenness(image));

//   // Apply algorithm 1: B4 - 1.03*B5
//   var bloom1 = image.select('nir').subtract(image.select('swir1').multiply(1.03)).rename('bloom1');

//   // Get binary image by applying the threshold
//   var bloom1_mask = image.select("H").lte(greenessThreshold).rename(["bloom1_mask"]);
  
//   //return original image + bloom, bloom_thresh
//   return image.addBands(image)
//           .addBands(bloom1)
//           .addBands(bloom1_mask);
// };
// //
// // Apply bloom detection algorithm
// var calcAlgorithm2 = function(image) {
//   // Algorithm 2 based on: 
//   // Matthews, M. (2011) A current review of empirical procedures 
//   //  of remote sensing in inland and near-coastal transitional 
//   //  waters, International Journal of Remote Sensing, 32:21, 
//   //  6855-6899, DOI: 10.1080/01431161.2010.512947
  
//   // Apply algorithm 2: B2/B1
//   var bloom2 = image.select('green')
//               .divide(image.select('blue'))
//               .rename(['bloom2']);
  
//   //return original image + bloom, bloom_thresh
//   return image.addBands(image)
//           .addBands(bloom2);
// };


// /// VISUALIZATION --------------------------------------------------------------------

// // Color palettes for bloom and bloom_thresh bands
// var bPal = ["7C7062", //land -2
//             "FFFFFF", //clouds -1
//             "0000ff", //non-bloom 0
//             "00FF00"  //bloom 1
//           ];
// var cPal = ['000000', // black 0.014 and below
//             'ff00ff', // purple 0.017
//             '0000ff', // blue 0.020
//             '00ffff', // cyan 0.023
//             '00ff00', // green 0.026
//             'ffff00', // yellow 0.029
//             'ffa500', // orange 0.032
//             'ff0000', // red 0.035
//             '660000', // red 0.038
//             ];

// // // Create land mask using MODIS annual land cover
// // // var land_mask = ee.Image('MCD12Q1/MCD12Q1_005_2001_01_01').select('Land_Cover_Type_1').neq(0);
// // // var water_mask = ee.Image('MCD12Q1/MCD12Q1_005_2001_01_01').select('Land_Cover_Type_1').eq(0).selfMask();
// // // Add layers to map for visualization

// // // Map.addLayer(land_mask.mask(land_mask), {min:0, max:1, palette: "000000"}, 'Land Mask');

// /// APPLY ALGORITHM TO IMAGE -----------------------------------------------------------------------

// // Filter to specific image
// // var collection = ee.ImageCollection('LT5_L1T_TOA')
// // var collection = ee.ImageCollection('LANDSAT/LE07/C01/T1_TOA')
// //   .filterDate(startDate, startDate.advance(num_days, 'day'));
// Object.keys(bloomCollections).map(function(k){
//   var collection = bloomCollections[k];
//   print(collection)
//   // Apply algorithms
//   collection = collection.map(calcAlgorithm1);
//   collection = collection.map(calcAlgorithm2);

//   // Mask out clouds
//   // collection = collection.map(maskClouds);
//   var bns = ee.Image(collection.first()).bandNames();
//   var pctls = [50,75,90,100]
//   pctls.map(function(pctl){
    
//     var bloom_image = collection.reduce(ee.Reducer.percentile([pctl])).rename(bns);
//     Map.addLayer(bloom_image, {bands:['red','green','blue'], min:0, max:0.3, 'gamma': 1.2},pctl.toString() + ' ' +k+' True Color',false);
  
//     Map.addLayer(
//       bloom_image.select("bloom1").updateMask(water_mask),
//       {min:0.014,max:0.038,palette: cPal},pctl.toString() + ' ' +k+
//       ' Algorithm 1: Raw Bloom',
//       false);
//     Map.addLayer(
//       bloom_image.select("bloom1").updateMask(water_mask.and(bloom_image.select('bloom1_mask'))),
//       {min:0.014,max:0.038,palette: cPal},pctl.toString() + ' ' +k+
//       ' Algorithm 1: Bloom Plus Filter',false);
//     Map.addLayer(
//       bloom_image.select("bloom2").updateMask(water_mask),
//       {min:0.76,max:1,palette: cPal},pctl.toString() + ' ' +k+
//       ' Algorithm 2: Raw Bloom',
//       false);
    
//   })
  
//   // Export.image.toDrive(image, description, folder, fileNamePrefix, dimensions, region, scale, crs, crsTransform, maxPixels, shardSize, fileDimensions, skipEmptyTiles, fileFormat, formatOptions)
// });


  
Map.setOptions('HYBRID')