/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var oregon = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-124.50991246492801, 46.43504904438413],
          [-124.50991246492801, 41.58774957846286],
          [-116.27016637117801, 41.58774957846286],
          [-116.27016637117801, 46.43504904438413]]], null, false),
    test = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-122.65985170381684, 44.834144261244035],
          [-122.65985170381684, 43.206865844796674],
          [-120.87320009248872, 43.206865844796674],
          [-120.87320009248872, 44.834144261244035]]], null, false),
    clean_crescent_lake = 
    /* color: #1520d6 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-122.05255927861896, 43.51304992163878],
          [-122.05255927861896, 43.446285403511645],
          [-121.93308296025958, 43.446285403511645],
          [-121.93308296025958, 43.51304992163878]]], null, false),
    dirty_odell_lake = 
    /* color: #eae825 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-122.06972541631427, 43.60361193043472],
          [-122.06972541631427, 43.5409296523914],
          [-121.93788947881427, 43.5409296523914],
          [-121.93788947881427, 43.60361193043472]]], null, false),
    clean_crater_lake = 
    /* color: #2141ff */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-122.18560475614254, 42.9865102204338],
          [-122.18560475614254, 42.893013108442574],
          [-122.02355641629879, 42.893013108442574],
          [-122.02355641629879, 42.9865102204338]]], null, false),
    dirty_billy_chinook = 
    /* color: #f9ff58 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-121.48239392202757, 44.62035796573114],
          [-121.48239392202757, 44.509308410535326],
          [-121.2262751476135, 44.509308410535326],
          [-121.2262751476135, 44.62035796573114]]], null, false),
    dirty_haystack_lake = 
    /* color: #ffc82d */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-121.16588167651793, 44.50205986989772],
          [-121.16588167651793, 44.483202103856605],
          [-121.13292269214293, 44.483202103856605],
          [-121.13292269214293, 44.50205986989772]]], null, false),
    clean_waldo_lake = 
    /* color: #1739ff */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-122.08516666791367, 43.770494425923616],
          [-122.08516666791367, 43.67621099378742],
          [-122.0041424979918, 43.67621099378742],
          [-122.0041424979918, 43.770494425923616]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

//Module imports
var getImagesLib = require('users/USFS_GTAC/modules:getImagesLib2.js');
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Define user parameters:
var baselineStartYear = 2014;
var baselineEndYear = 2017;
var analysisStartYear = 2018;
var analysisEndYear = 2018;
var zThresh = 1.5;

var args = {
          'studyArea':clean_waldo_lake,
          'startYear':baselineStartYear,
          'endYear':analysisEndYear,
          'startJulian':1,
          'endJulian':365,
          'toaOrSR':'TOA',
          'includeSLCOffL7':true,
          'defringeL5':true,
          'applyQABand':false,
          'applyCloudProbability':true,
          'applyShadowShift':false,
          'applyCloudScoreLandsat':false,
          'applyCloudScoreSentinel2':false,
          'applyTDOMLandsat':true,
          'applyTDOMSentinel2':true,
          'applyFmaskCloudMask':true,
          'applyFmaskCloudShadowMask':true,
          'applyFmaskSnowMask':false,
          'cloudHeights':ee.List.sequence(500,10000,500),
          'cloudScoreThresh':20,
          'performCloudScoreOffset':true,
          'cloudScorePctl':10,
          'zScoreThresh':-1,
          'shadowSumThresh':0.35,
          'contractPixels':1.5,
          'dilatePixels':3.5,
          'landsatResampleMethod':'near',
          'sentinel2ResampleMethod':'aggregate',
          'convertToDailyMosaics':true,
          'runChastainHarmonization':true,
          'correctIllumination':false,
          'correctScale':250,
          'cloudProbThresh': 40
        }
//If available, bring in preComputed cloudScore offsets and TDOM stats
//Set to null if computing on-the-fly is wanted
//These have been pre-computed for all CONUS for Landsat and Setinel 2 (separately)
//and are appropriate to use for any time period within the growing season
//The cloudScore offset is generally some lower percentile of cloudScores on a pixel-wise basis
var preComputedCloudScoreOffset = getImagesLib.getPrecomputedCloudScoreOffsets(args.cloudScorePctl);
args.preComputedLandsatCloudScoreOffset = preComputedCloudScoreOffset.landsat;
args.preComputedSentinel2CloudScoreOffset = preComputedCloudScoreOffset.sentinel2;

//The TDOM stats are the mean and standard deviations of the two bands used in TDOM
//By default, TDOM uses the nir and swir1 bands
var preComputedTDOMStats = getImagesLib.getPrecomputedTDOMStats();
args.preComputedLandsatTDOMIRMean = preComputedTDOMStats.landsat.mean;
args.preComputedLandsatTDOMIRStdDev = preComputedTDOMStats.landsat.stdDev;

args.preComputedSentinel2TDOMIRMean = preComputedTDOMStats.sentinel2.mean;
args.preComputedSentinel2TDOMIRStdDev = preComputedTDOMStats.sentinel2.stdDev;

////////////////////////////////////////////////////////////////////////////////
//Function Calls
//Get all images
var images = getImagesLib.getProcessedLandsatAndSentinel2Scenes(args);
Map.addLayer(images.median(),getImagesLib.vizParamsFalse,'Median',false);

//Get water mask
var permWater = ee.Image("JRC/GSW1_1/GlobalSurfaceWater").select([0]).gte(90).unmask(0);
var tempWater =ee.ImageCollection("JRC/GSW1_1/MonthlyHistory")
              .filter(ee.Filter.calendarRange(args.startYear,args.endYear,'year'))
              .filter(ee.Filter.calendarRange(args.startJulian,args.endJulian)).mode().eq(2).unmask(0);

var water_mask = permWater.or(tempWater).selfMask();
Map.addLayer(water_mask, {min:1, max:1, palette: "00F"}, 'Water Mask', false);

var usfs = ee.FeatureCollection('projects/lcms-292214/assets/CONUS-Ancillary-Data/FS_Boundaries')
          .filterBounds(args.studyArea);
usfs = usfs.map(function(f){return f.set('constant',1)});
var usfsMask = usfs.reduceToImage(['constant'], ee.Reducer.first()).focal_max(2000,'circle','meters');

Map.addLayer(usfsMask,{},'USFS Lands',false);

//Mask images to usfs
// images = images.map(function(img){return img.updateMask(usfsMask)});
/// VISUALIZATION --------------------------------------------------------------------

// Color palettes for bloom and bloom_thresh bands
var bPal = ["7C7062", //land -2
            "FFFFFF", //clouds -1
            "0000ff", //non-bloom 0
            "00FF00"  //bloom 1
          ];
var cPal = ['000000', // black 0.014 and below
            'ff00ff', // purple 0.017
            '0000ff', // blue 0.020
            '00ffff', // cyan 0.023
            '00ff00', // green 0.026
            'ffff00', // yellow 0.029
            'ffa500', // orange 0.032
            'ff0000', // red 0.035
            '660000', // red 0.038
            ];

images = images.map(function(img){
  img= getImagesLib.HoCalcAlgorithm1(img);
  img= getImagesLib.HoCalcAlgorithm2(img);
  return img;
});

images = images.map(function(img){return img.updateMask(water_mask)}).select(['NDSI','bloom1','bloom2']);
Map.addLayer(images,{},'Full Time Series',false);
var ndsiComposite = images.qualityMosaic('NDSI');
Map.addLayer(ndsiComposite,getImagesLib.vizParamsFalse,'Max NDSI Composite',false);

var baselineImages = images.filter(ee.Filter.calendarRange(baselineStartYear,baselineEndYear,'year'));
var analysisImages = images.filter(ee.Filter.calendarRange(analysisStartYear,analysisEndYear,'year'));

// Map.addLayer(analysisImages.select([0]).mean(),{min:0,max:0.2,palette:cPal},'Mean Bloom 1');
Map.addLayer(analysisImages.select([1]).mean(),{min:0.76,max:1,palette:cPal},'Mean Bloom 2');

var baselineMean = baselineImages.mean();
var baselineStdDev = baselineImages.reduce(ee.Reducer.stdDev());
Map.addLayer(baselineMean,{},'Baseline Mean',false);
Map.addLayer(baselineStdDev,{},'Baseline StdDev',false);

var z = analysisImages.map(function(img){return img.subtract(baselineMean).divide(baselineStdDev)}).mean();
// Map.addLayer(z.select([0]),{min:0,max:2,palette:cPal},'Z 1');
Map.addLayer(z.select([1]),{min:0,max:2,palette:cPal},'Z 2');

var bloomAnomaly = z.gte(zThresh).selfMask();
// Map.addLayer(bloomAnomaly.select([0]),{min:1,max:1,palette:'660000'},'Bloom 1');
Map.addLayer(bloomAnomaly.select([1]).focal_max(2),{min:1,max:1,palette:'ff0000'},'Bloom 2');
// / APPLY ALGORITHM TO IMAGE -----------------------------------------------------------------------

// // Filter to specific image
// // var collection = ee.ImageCollection('LT5_L1T_TOA')
// // var collection = ee.ImageCollection('LANDSAT/LE07/C01/T1_TOA')
// //   .filterDate(startDate, startDate.advance(num_days, 'day'));
// Object.keys(bloomCollections).map(function(k){
//   var collection = bloomCollections[k];
//   print(collection)
//   // Apply algorithms
//   collection = collection.map(calcAlgorithm1);
//   collection = collection.map(calcAlgorithm2);

//   // Mask out clouds
//   // collection = collection.map(maskClouds);
//   var bns = ee.Image(collection.first()).bandNames();
//   var pctls = [50,75,90,100]
//   pctls.map(function(pctl){
    
//     var bloom_image = collection.reduce(ee.Reducer.percentile([pctl])).rename(bns);
//     Map.addLayer(bloom_image, {bands:['red','green','blue'], min:0, max:0.3, 'gamma': 1.2},pctl.toString() + ' ' +k+' True Color',false);
  
//     Map.addLayer(
//       bloom_image.select("bloom1").updateMask(water_mask),
//       {min:0.014,max:0.038,palette: cPal},pctl.toString() + ' ' +k+
//       ' Algorithm 1: Raw Bloom',
//       false);
//     Map.addLayer(
//       bloom_image.select("bloom1").updateMask(water_mask.and(bloom_image.select('bloom1_mask'))),
//       {min:0.014,max:0.038,palette: cPal},pctl.toString() + ' ' +k+
//       ' Algorithm 1: Bloom Plus Filter',false);
//     Map.addLayer(
//       bloom_image.select("bloom2").updateMask(water_mask),
//       {min:0.76,max:1,palette: cPal},pctl.toString() + ' ' +k+
//       ' Algorithm 2: Raw Bloom',
//       false);
    
//   })
  
//   // Export.image.toDrive(image, description, folder, fileNamePrefix, dimensions, region, scale, crs, crsTransform, maxPixels, shardSize, fileDimensions, skipEmptyTiles, fileFormat, formatOptions)
// });


  
Map.setOptions('HYBRID')